/*
 * This file is generated by jOOQ.
 */
package dev.akkinoc.try_flyway_with_postgres_multi_schemas.schema1


import dev.akkinoc.try_flyway_with_postgres_multi_schemas.schema1.tables.Schema1Table1
import dev.akkinoc.try_flyway_with_postgres_multi_schemas.schema1.tables.Schema1Table2

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Schema1 : SchemaImpl("schema1", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>schema1</code>
         */
        val SCHEMA1: Schema1 = Schema1()
    }

    /**
     * The table <code>schema1.schema1_table1</code>.
     */
    val SCHEMA1_TABLE1: Schema1Table1 get() = Schema1Table1.SCHEMA1_TABLE1

    /**
     * The table <code>schema1.schema1_table2</code>.
     */
    val SCHEMA1_TABLE2: Schema1Table2 get() = Schema1Table2.SCHEMA1_TABLE2

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Schema1Table1.SCHEMA1_TABLE1,
        Schema1Table2.SCHEMA1_TABLE2
    )
}
